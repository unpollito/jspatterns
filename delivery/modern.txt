Code Reuse Patterns
By David Martin Gonzalez, Enrico Gigantiello


1.	Intro

This document is the written transcript of the seminar Javascript Patterns and Antipatterns held in April 2015 on the subject of Code Reuse Patterns. We will present the two main categories in which these patterns are divided and present the refactoring of some Javascript code which was lacking or making wrong use of these patterns. 
It is clear to all  JS developers that over the last years this functional object oriented language has tried to provide some syntactical sugar to ‘look like’ classical object oriented languages (classical meaning using classes). The reason for this was probably to encourage developers from other OO languages to use JS. But as we all know JS has no actual classes but only prototypes. 
For this reason we will in this paper distinguish between patterns using the concept  of class to obtain code reuse (Classical) and the ones using JS’s proper features to obtain the same goal (Modern).

2.	Classical Code Reuse Patterns

Code reuse in classical OO languages is obtained through inheritance: so in the following section we will assume to have a parent object with both own properties and extended prototype functionalities, and a child object which wants to inherit them.

One basical approach to solving this problem is setting the child's prototype as an instance of a new parent object. This way inside the child object we can access all of the parent's functionalities and members just by looking upwards in the prototype chain. This process is transparent to the developer since when we call child.method if the method is not found in the child's properties JS automatically looks for it in the prototype. The problem is that own properties are likely to be specific to one instance and not reusable so having a reference to them in a child instance is not a good code reuse principle in JS. Furthermore this approach doesn’t enable you to pass parameters to the child constructor.

To solve this last issue the "Rent a Constructor" pattern can be used. This solution consists in calling the Function.prototype.apply()  method to use the parent constructor on an instance of the child  while passing an array of arguments to it. We will see later how the apply method can be invoked to reuse any other method of an object. This pattern only gives a copy of the inherited properties to the child so that it can freely modify them. Furthermore it makes multiple inheritance quite easy since the object can easily 'apply' more than one object's constructor. The issue here is that no reference to the parent prototype will be available from the child.

The "Rent And Set Prototype" pattern, beeing the combination of the previous two methods, both applies the parent constructor and sets the child prototype to a new parent object. This way the child will have a copy of the 'own members' of it's parent but can still acess the functionalities set in it's protoype. A minor drawback is that the parent constructor is called twice.

As we previously said among the good principles of code reuse in JS is the idea of placing the reusable parts of code of an object in it’s prototype and not in it’s own properties. Following this idea 'ad litteram' we realize that the child actually only has to have access to it's parent prototype, not to the object itself. We can apply this principle by making the child’s and parent’s prototype to be the same object and this way also avoiding to use the 'new' operator at all.
Unfortunately this "Share The Prototype" pattern has the huge drawback that any son or grandson down the hierarchy accesses the exact same prototype object as the first parent which means he can modify it and generate unexpected behaviour.

Luckily enough JS gives us a workaround to this problem. We can set the prototype of an empty function to be the same as the parent's and next set the child's prototype to a new instance of the empty function. This pattern is called Temporary Constructor or also Proxy pattern and next is the snippet doing what expressed in the previous sentence:
function inherit(C, P) {
var F = function () {};
    F.prototype = P.prototype;
    C.prototype = new F();
}
This pattern is widely recognized to be a good solution since we personally found it in many of the projects we scanned while looking for code to refactor. Therefore it has been enriched to look even more like a classical object oriented inheritance by adding a 'uber' property (linked to the parent prototype) which is simulating the use of super (obviously super couldn't be used since it's a reserved word). 

One last approach is the use of 'Klass' methods which provides syntactic sugar for emulating actual classes in JavaScript. Many different libraries provide different implementations of Klasses, but they all share three main points. First they obviously have to provide an inheritance mechanism; second they should give access to the superklass; third a convention has to be estabilished to recognize one of the methods defined in the klass as it's constructor. We can associate the result of invoking this function to a var KlassName and then use the new KlassName(params) to create an object. We wont dig into the Klass’s implementation but it might be good to know that the inheritance is obtained with the Proxy pattern shown before. An example implementation can be found in Stoyanov's JavaScript Patterns.

We  finally want to also remark that from ES6 new syntactical sugar will be added to simulate classical inheritance in JS. This version is not available yet but code can be run with the use of libraries like  https://babeljs.io/. Among others is the introduction of very familiar keywords for Classical OO developers such as extends, constructor, super when defining an object. The words are quite self explicatory so we wont go over their functionalities. 

While looking around for projects to refactor we also stepped into a very nice solution to solve the 'forgetting the new' antipattern. Given a generic Person(name) function, when creating an instance of the person it's important to use the 'new' notation since "var john = Person('John')" will be undefined and it's name bound to the global object (we are actually not telling JS we want to use the function as a constructor). A workaround is as simple checking if the this inside the function is an instance of Person. If so we just set the properties else we return new Person(name):
function Person(name) {
if (!(this instanceof Person))
	return new Person(name);
this.name = name;
}

Final Consideration
We have showed once again the extreme flexibility of JS, to the point that it can emulate a differently Object Oriented language. 
But do we really want to force this dynamic language to copy another language’s syntax and semantics? The next group of patterns will show us the brilliant native ways JS has to solve code reuse problems.

3.		Modern Code Reuse Patterns
As was previously indicated, we distinguish between two types of patterns: those which try to mimic that of object-oriented design, and the ones that intend to make full use of JavaScript's abilities, which we call "modern". In all these patterns, we simply try to create an object from one or several parent objects.

One of the most relevant and commonly used patterns is called prototypal inheritance. In a nutshell, it basically sets an object's prototype to be another object. This is typically achieved by having an object() function, such that the first parameter to this function is the object we want to inherit from; the function would then return a new object.

A particularly interesting feature of this pattern is that it allows us to decide whether to inherit an object's own properties or simply the reusable methods set in the prototype. This distinction matters because sometimes an object's own properties might be reusable, whereas in other cases they will be bound to a certain object. While invoking object() with an existing object inherits own properties, using that object's prototype as the argument to object() allows us only to inherit attributes defined in the prototype.

Lastly, we would simply point out that an Object.create() function is present in ECMAScript 5, which works in most current browsers save for IE 8 and older. This function takes an optional second parameter which allows us to specify parameters for the new object.

Another well-known pattern is called mix-ins, which allows for multiple inheritance. The basic idea behind it is that an object can inherit from several other objects simply by copying all of its attributes. A basic implementation should be straightforward, although caution should be taken to ensure that composite objects are copied recursively.

Rather than inheritance, the next pattern focuses on pure code reuse. If for some reason we had a method in an object which we don't want to define for a second object, it is possible to use JavaScript's call() or apply() methods. The main issue with this approach would typically be the "this" context, which if calling a function normally, would always point to the object which contains that function. However, call() and apply() take a first argument which allows us to define the "this" context that should be used when invoking this function. Therefore, this allows us to actually use a function in a different object to that where it was defined.

Care should be taken when using this approach without call() or apply(): failing to set the context appropriately will often lead to errors which are hard to spot. For instance, copying a reference to a function and passing it as a callback will not be enough to change the context. Fortunately, it is possible to define a bind() function which takes an object and a function and returns a new function which is identical to invoking the original function with the specified object as its context. A Function.prototype.bind() method is available in ECMAScript 5, although again it does not work in IE versions older than 9.

Lastly, one particularly interesting pattern is the functional pattern. While the main idea is rather similar to traditional inheritance in object-oriented languages, there are several details that make it stand out.

In the functional pattern, each object type has a constructor that takes one "spec" object which contains a list of variables needed to initialize the object. Optionally, it might also take a "my" object, which contains private variables that might be needed by a constructor up above in the inheritance chain but not necessarily in the current constructor. Then all the needed private variables will be defined and a new object ("that") is created. "that" will contain all the necessary methods, such as getters and setters, but it will not have any exposed variables. Inheritance is achieved by initializing "that" to an object of another type by invoking that type's constructor; if we don't want to inherit, we can simply initialize "that" to an empty object.

The functional pattern is significantly less verbose than other approaches, enforces attribute and method privacy easily and allows to do without "new" or "this", keywords whose inappropriate use often cause hard-to-spot errors. However, it has the downside that object instantiation is usually slower, as all the methods inside the returned object need to be defined with each call to the constructor. This needs to be taken into account when deciding which pattern to use; if lots of objects are to be created, then this might not be the most appropriate approach.

To finish, we would like to indicate that, as a whole, classic inheritance is a powerful tool, but not necessarily the most appropriate one for JavaScript. Many static, strongly typed languages lack JS' abilities, which means that there are many simpler ways to achieve the same purpose.

We have chosen to refactor XDate, a library which aims to extend the native JavaScript Date type. This library adds several new operations, such as adding a set amount of years, months, etc. to a date, as well as calculating the difference between two dates. The source files for this project can be found in https://github.com/arshaw/xdate.

The main issue we have found with this library is that, instead of extending from a native Date object, it is simply storing one internally and manually defining all the operations, which leads to unnecessary code clutter; in particular, all getters or setters must be manually defined. While extending a Date object is not straightforward (see https://stackoverflow.com/questions/6075231/how-to-extend-the-javascript-date-object), some of the previously used patterns can be used to significantly reduce the amount of written code. In particular, we have used the functional pattern.

It needs to be said that, due to the considerable size of the XDate library and the costs of refactoring its constructor, the refactored version of the project does not contain all the operations; instead, it contains a subset of these, which we believe are sufficient to illustrate the differences between both approaches.

Extending directly from Date using the functional pattern allowed us to get rid, at the very least, of the definition of all "getUTC" methods. The getters in the refactored version do not work exactly as those in the original project, as we do not observe whether the object is set to UTC, but even if we were to mimic this behaviour, the amount of written code would still be significantly less; we'd only have to call either a get or getUTC function depending on the UTC mode. Something similar happens to the setters, which we have implemented; while the setters' basic functionality is untouched, the ones in XDate return an instance of the object, which can be used for chaining. Although this lead us to implementing manually all setters as well, the amount of code used is again smaller and could have been avoided completely had we decided not to allow chaining.

All in all, it seems clear that the functional pattern allows for much cleaner code. However, it should also be stressed that refactoring a large class' constructor can take a very significant amount of time; on top of that, this particular case also involves modifying public APIs, which can be inappropriate for a reusable library. In particular, our changes involve dropping the need to use the "new" keyword and, most importantly, renaming the constructor from XDate to xDate, so as to indicate that the constructor doesn't need to be invoked with "new".

